@{
    var role = Context.Session.GetString("Role");
}

<link rel="stylesheet" href="~/css/disbursement.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1>
        <i class="fas fa-money-check-alt me-3"></i>
        Loan Disbursement Management
    </h1>
    <p>Manage and process approved loan disbursements</p>
</div>

<!-- Refresh Button -->
<div class="refresh-container">
    <button type="button" class="btn-refresh" onclick="refreshData()">
        <i class="fas fa-sync-alt"></i>
        Refresh
    </button>
</div>

<!-- Table Controls -->
<div class="table-controls">
    <div class="rows-control">
        <label for="rowsPerPage">
            <i class="fas fa-list-ol"></i>
            Rows per page:
        </label>
        <select id="rowsPerPage" class="form-select" onchange="changeRowsPerPage()">
            <option value="5" selected>5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>

    <div class="controls-right">
        <div class="input-group search-input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search disbursements..." oninput="searchDisbursements()">
        </div>
    </div>
</div>

<!-- Table -->
<div class="table-container">
    <div class="table-wrapper">
        <table class="table table-striped">
            <thead>
                <tr>
                    @if (role == "Admin")
                    {
                        <th scope="col"><i class="fas fa-hashtag me-1"></i>Customer ID</th>
                        <th scope="col"><i class="fas fa-user me-1"></i>Name</th>
                    }
                    <th scope="col"><i class="fas fa-tag me-1"></i>Product Type</th>
                    <th scope="col"><i class="fas fa-box me-1"></i>Product Name</th>
                    <th scope="col"><i class="fas fa-percentage me-1"></i>Interest Rate</th>
                    <th scope="col"><i class="fas fa-hourglass-half me-1"></i>Tenure</th>
                    <th scope="col"><i class="fas fa-rupee-sign me-1"></i>Loan Amount</th>
                    <th scope="col"><i class="fas fa-info-circle me-1"></i>Status</th>
                    @if (role == "Admin")
                    {
                        <th scope="col"><i class="fas fa-cogs me-1"></i>Actions</th>
                    }
                </tr>
            </thead>
            <tbody id="table-body">
                @foreach (var app in ViewBag.ApplicationList)
                {
                    <tr class="disbursement-row" data-application-id="@app.ApplicationId">
                        @if (role == "Admin")
                        {
                            <td><strong>@app.CustomerId</strong></td>
                            <td><strong>@app.Name</strong></td>
                        }
                        <td><strong>@app.ProductType</strong></td>
                        <td><strong>@app.ProductName</strong></td>
                        <td><span class="rate">@app.InterestRate%</span></td>
                        <td><span class="tenure">@app.LoanTenure years</span></td>
                        <td><span class="amount">₹@app.LoanAmount?.ToString("N0")</span></td>
                        <td>
                            @{
                                string statusClass = "";
                                string statusIcon = "";
                                switch (app.DisburseStatus?.ToLower())
                                {
                                    case "disbursed":
                                        statusClass = "status-disbursed";
                                        statusIcon = "fas fa-check-circle";
                                        break;
                                    case "pending":
                                        statusClass = "status-pending";
                                        statusIcon = "fas fa-clock";
                                        break;
                                    case "not disbursed":
                                    default:
                                        statusClass = "status-not-disbursed";
                                        statusIcon = "fas fa-times-circle";
                                        break;
                                }
                            }
                            <span class="status-badge @statusClass">
                                <i class="@statusIcon me-1"></i>@app.DisburseStatus
                            </span>
                        </td>
                        @if (role == "Admin")
                        {
                            <td>
                                <form method="post" asp-action="Disburse" asp-controller="Disbursement" class="disburse-form">
                                    <input type="hidden" name="applicationId" value="@app.ApplicationId" />
                                    <button type="submit" class="btn btn-disburse @(app.DisburseStatus?.ToLower() == "disbursed" ? "disabled" : "")"
                                    @(app.DisburseStatus?.ToLower() == "disbursed" ? "disabled" : "")>
                                        <i class="fas fa-money-check-alt me-1"></i>
                                        @(app.DisburseStatus?.ToLower() == "disbursed" ? "Disbursed" : "Disburse")
                                    </button>
                                </form>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="paginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Disbursement pagination">
            <ul class="pagination" id="paginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>

<script>
    // Global variables for pagination and search
    let currentPage = 1;
    let rowsPerPage = 5;
    let allRows = [];
    let filteredRows = [];

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        initializeTable();
    });

    function initializeTable() {
        allRows = Array.from(document.querySelectorAll('.disbursement-row'));
        filteredRows = [...allRows];
        updateTable();
    }

    function applyFilters() {
        let rows = [...allRows];

        // Apply search filter
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        if (searchTerm !== '') {
            rows = rows.filter(row => {
                const text = row.textContent.toLowerCase();
                return text.includes(searchTerm);
            });
        }

        filteredRows = rows;
    }

    function updateTable() {
        // Hide all rows first
        allRows.forEach(row => row.style.display = 'none');

        // Calculate pagination
        const totalRows = filteredRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

        // Show current page rows
        for (let i = startIndex; i < endIndex; i++) {
            if (filteredRows[i]) {
                filteredRows[i].style.display = '';
            }
        }

        // Update pagination controls
        updatePagination(totalPages, totalRows, startIndex, endIndex);
    }

    function updatePagination(totalPages, totalRows, startIndex, endIndex) {
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationInfo = document.getElementById('paginationInfo');

        // Clear existing pagination
        paginationContainer.innerHTML = '';

        if (totalPages <= 1) {
            const singleBtn = createBootstrapPaginationButton('1', 1, false, true);
            paginationContainer.appendChild(singleBtn);
        } else {
            // First page button
            const firstBtn = createBootstrapPaginationButton('«', 1, currentPage === 1);
            paginationContainer.appendChild(firstBtn);

            // Previous page button
            const prevBtn = createBootstrapPaginationButton('‹', currentPage - 1, currentPage === 1);
            paginationContainer.appendChild(prevBtn);

            // Page number buttons
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageBtn = createBootstrapPaginationButton(i, i, false, i === currentPage);
                paginationContainer.appendChild(pageBtn);
            }

            // Next page button
            const nextBtn = createBootstrapPaginationButton('›', currentPage + 1, currentPage === totalPages);
            paginationContainer.appendChild(nextBtn);

            // Last page button
            const lastBtn = createBootstrapPaginationButton('»', totalPages, currentPage === totalPages);
            paginationContainer.appendChild(lastBtn);
        }

        // Update pagination info
        if (totalRows > 0) {
            paginationInfo.innerHTML = `
                <i class="fas fa-info-circle"></i>
                Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
            `;
        } else {
            paginationInfo.innerHTML = `
                <i class="fas fa-info-circle"></i>
                No matching records found
            `;
        }
    }

    function createBootstrapPaginationButton(text, page, disabled, active = false) {
        const li = document.createElement('li');
        li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;

        const button = document.createElement('a');
        button.className = 'page-link';
        button.innerHTML = text;
        button.href = '#';

        if (!disabled) {
            button.onclick = (e) => {
                e.preventDefault();
                goToPage(page);
            };
        }

        li.appendChild(button);
        return li;
    }

    function goToPage(page) {
        currentPage = page;
        updateTable();
    }

    function changeRowsPerPage() {
        rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
        currentPage = 1;
        updateTable();
    }

    function searchDisbursements() {
        currentPage = 1;
        applyFilters();
        updateTable();
    }

    function refreshData() {
        const refreshBtn = document.querySelector('.btn-refresh i');
        refreshBtn.classList.add('fa-spin');

        // Clear search
        document.getElementById('searchInput').value = '';

        // Reset to original data
        currentPage = 1;
        applyFilters();

        setTimeout(() => {
            updateTable();
            refreshBtn.classList.remove('fa-spin');
        }, 800);
    }

    // Handle form submissions with loading state
    document.querySelectorAll('.disburse-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            const button = this.querySelector('.btn-disburse');
            if (!button.disabled) {
                button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
                button.disabled = true;
            }
        });
    });
</script>



