@using BankLoanProject.Models.Entities

@{
    var role = Context.Session.GetString("Role");
}

@model IEnumerable<BankLoanProject.Models.Entities.LoanProduct>
@{
    ViewBag.Title = "Loan Products";
}

<link rel="stylesheet" href="~/css/loan-product.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



<div class="main-content">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1>
            <i class="fas fa-hand-holding-usd me-3"></i>
            Loan Product Management
        </h1>
        <p>Explore our comprehensive loan options tailored to your needs</p>
    </div>

    <!-- Refresh Button -->
    <div class="refresh-container">
        <button type="button" class="btn-refresh" onclick="refreshData()">
            <i class="fas fa-sync-alt"></i>
            Refresh
        </button>
    </div>

    <!-- Loan Type Buttons -->
    <div class="loan-type-controls">
        <div class="loan-type-buttons">
            <button class="btn loan-btn btn-personal" onclick="showLoan('personal')">
                <i class="fas fa-user me-2"></i> Personal Loans
            </button>
            <button class="btn loan-btn btn-home" onclick="showLoan('home')">
                <i class="fas fa-home me-2"></i> Home Loans
            </button>
            <button class="btn loan-btn btn-vehicle" onclick="showLoan('vehicle')">
                <i class="fas fa-car me-2"></i> Vehicle Loans
            </button>
        </div>
    </div>

    <!-- Table Controls -->
    <div class="table-controls">
        <div class="rows-control">
            <label for="rowsPerPage">
                <i class="fas fa-list-ol"></i>
                Rows per page:
            </label>
            <select id="rowsPerPage" class="form-select" onchange="changeRowsPerPage()">
                <option value="5" selected>5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
        </div>

        <div class="controls-right">
            <div class="input-group search-input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" id="searchInput" placeholder="Search loan products..." oninput="searchProducts()">
            </div>
        </div>
    </div>

    <!-- Loan Sections -->
    @foreach (var type in new[] { "Personal", "Home", "Vehicle" })
    {
        var id = type.ToLower();
        <div id="@id" class="loan-section table-container" style="display:none;">
            <div class="section-header">
                <div class="section-info">
                    <span class="badge bg-secondary mb-2">@type Loans</span>
                    <h4 class="mb-2">
                        <i class="fas @(type == "Home" ? "fa-home" : type == "Vehicle" ? "fa-car" : "fa-user") me-2"></i>
                        @type Loans
                    </h4>
                    <p class="text-muted">Manage your @type loan products below.</p>
                </div>
                @if (role == "Admin")
                {
                    <button class="btn btn-success add-loan-btn" data-bs-toggle="modal" data-bs-target="#addLoanModal" onclick="prefillAddForm('@type')">
                        <i class="fas fa-plus me-1"></i> Create @type Loan
                    </button>
                }
            </div>

            <div class="table-wrapper">
                <table class="table" id="@(id)Table">
                    <thead>
                        <tr>
                            <th><i class="fas fa-tag"></i> Product Name</th>
                            <th><i class="fas fa-money-bill-wave"></i> Min Amount</th>
                            <th><i class="fas fa-money-bill-wave"></i> Max Amount</th>
                            <th><i class="fas fa-percentage"></i> Interest Rate</th>
                            <th><i class="fas fa-calendar-alt"></i> Tenure</th>
                            @if (role == "Admin")
                            {
                                <th class="actions-column"><i class="fas fa-cogs"></i> Actions</th>
                            }
                        </tr>
                    </thead>
                    <tbody class="loan-table-body" data-type="@id">
                        @foreach (var product in Model.Where(p => p.ProductType.ToLower() == id))
                        {
                            <tr class="loan-row" data-loan-id="@product.LoanProductId">
                                <td><strong>@product.ProductName</strong></td>
                                <td><span class="amount">₹@product.MinAmount.ToString("N0")</span></td>
                                <td><span class="amount">₹@product.MaxAmount.ToString("N0")</span></td>
                                <td><span class="rate">@product.InterestRate%</span></td>
                                <td><span class="tenure">@product.Tenure months</span></td>
                                @if (role == "Admin")
                                {
                                    <td class="actions-cell">
                                        <div class="action-buttons">
                                            <button class="btn-action btn-edit" data-bs-toggle="modal" data-bs-target="#updateLoanModal" onclick="loadUpdateForm(@product.LoanProductId)">
                                                <i class="fas fa-edit"></i>
                                                <span>Edit</span>
                                            </button>
                                            <a href="@Url.Action("Delete", new { id = product.LoanProductId })" class="btn-action btn-delete" onclick="return confirmDelete(@product.LoanProductId);">
                                                <i class="fas fa-trash"></i>
                                                <span>Delete</span>
                                            </a>
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination Section -->
            <div class="pagination-section">
                <div class="pagination-info" id="@(id)PaginationInfo">
                    <!-- Pagination info will be generated by JavaScript -->
                </div>
                <nav aria-label="@type loan pagination">
                    <ul class="pagination" id="@(id)PaginationContainer">
                        <!-- Pagination buttons will be generated by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    }

    <!-- Add Modal -->
    <div class="modal fade" id="addLoanModal" tabindex="-1" aria-labelledby="addLoanModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addLoanModalLabel">
                        <i class="fas fa-plus"></i> Add Loan Product
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    @Html.Partial("AddLoanProduct", new LoanProduct())
                </div>
            </div>
        </div>
    </div>

    <!-- Update Modal -->
    <div class="modal fade" id="updateLoanModal" tabindex="-1" aria-labelledby="updateLoanModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateLoanModalLabel">
                        <i class="fas fa-edit"></i> Update Loan Product
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="updateModalBody">
                    <!-- AJAX-loaded content -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables for pagination and search
        let currentPage = 1;
        let rowsPerPage = 5;
        let currentLoanType = 'personal';
        let allRows = {};
        let filteredRows = {};

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Restore the active loan type from localStorage
            const savedLoanType = localStorage.getItem('activeLoanType') || 'personal';

            initializeTables();
            showLoan(savedLoanType);
        });

        function initializeTables() {
            ['personal', 'home', 'vehicle'].forEach(type => {
                allRows[type] = Array.from(document.querySelectorAll(`#${type} .loan-row`));
                filteredRows[type] = [...allRows[type]];
                updateTable(type);
            });
        }

        function showLoan(type) {
            // Hide all sections
            document.querySelectorAll('.loan-section').forEach(sec => sec.style.display = 'none');

            // Show selected section
            document.getElementById(type).style.display = 'block';

            // Update button states
            document.querySelectorAll('.loan-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`.btn-${type}`).classList.add('active');

            // Save the current loan type to localStorage
            localStorage.setItem('activeLoanType', type);

            currentLoanType = type;
            applyFilters(type);
            updateTable(type);
        }

        function applyFilters(type) {
            let rows = [...allRows[type]];

            // Apply search filter
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            if (searchTerm !== '') {
                rows = rows.filter(row => {
                    const text = row.textContent.toLowerCase();
                    return text.includes(searchTerm);
                });
            }

            filteredRows[type] = rows;
        }

        function updateTable(type) {
            // Hide all rows first
            allRows[type].forEach(row => row.style.display = 'none');

            // Calculate pagination
            const totalRows = filteredRows[type].length;
            const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

            // Show current page rows
            for (let i = startIndex; i < endIndex; i++) {
                if (filteredRows[type][i]) {
                    filteredRows[type][i].style.display = '';
                }
            }

            // Update pagination controls
            updatePagination(type, totalPages, totalRows, startIndex, endIndex);
        }

        function updatePagination(type, totalPages, totalRows, startIndex, endIndex) {
            const paginationContainer = document.getElementById(`${type}PaginationContainer`);
            const paginationInfo = document.getElementById(`${type}PaginationInfo`);

            // Clear existing pagination
            paginationContainer.innerHTML = '';

            if (totalPages <= 1) {
                const singleBtn = createBootstrapPaginationButton('1', 1, false, true);
                paginationContainer.appendChild(singleBtn);
            } else {
                // First page button
                const firstBtn = createBootstrapPaginationButton('«', 1, currentPage === 1);
                paginationContainer.appendChild(firstBtn);

                // Previous page button
                const prevBtn = createBootstrapPaginationButton('‹', currentPage - 1, currentPage === 1);
                paginationContainer.appendChild(prevBtn);

                // Page number buttons
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    const pageBtn = createBootstrapPaginationButton(i, i, false, i === currentPage);
                    paginationContainer.appendChild(pageBtn);
                }

                // Next page button
                const nextBtn = createBootstrapPaginationButton('›', currentPage + 1, currentPage === totalPages);
                paginationContainer.appendChild(nextBtn);

                // Last page button
                const lastBtn = createBootstrapPaginationButton('»', totalPages, currentPage === totalPages);
                paginationContainer.appendChild(lastBtn);
            }

            // Update pagination info
            if (totalRows > 0) {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
                `;
            } else {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    No matching records found
                `;
            }
        }

        function createBootstrapPaginationButton(text, page, disabled, active = false) {
            const li = document.createElement('li');
            li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;

            const button = document.createElement('a');
            button.className = 'page-link';
            button.innerHTML = text;
            button.href = '#';

            if (!disabled) {
                button.onclick = (e) => {
                    e.preventDefault();
                    goToPage(page);
                };
            }

            li.appendChild(button);
            return li;
        }

        function goToPage(page) {
            currentPage = page;
            updateTable(currentLoanType);
        }

        function changeRowsPerPage() {
            rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
            currentPage = 1;
            updateTable(currentLoanType);
        }

        function searchProducts() {
            currentPage = 1;
            applyFilters(currentLoanType);
            updateTable(currentLoanType);
        }

        function refreshData() {
            const refreshBtn = document.querySelector('.btn-refresh i');
            refreshBtn.classList.add('fa-spin');

            // Clear search
            document.getElementById('searchInput').value = '';

            // Reset to original data
            currentPage = 1;
            applyFilters(currentLoanType);

            setTimeout(() => {
                updateTable(currentLoanType);
                refreshBtn.classList.remove('fa-spin');
            }, 800);
        }

        function loadUpdateForm(id) {
            fetch(`/LoanProduct/UpdateLoanProduct?id=${id}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById("updateModalBody").innerHTML = html;
                });
        }

        function prefillAddForm(type) {
            setTimeout(() => {
                const input = document.querySelector('#addLoanModal input[name="ProductType"]');
                if (input) input.value = type;
            }, 300);
        }

        function confirmDelete(id) {
            if (confirm('Are you sure you want to delete this loan product?')) {
                // Save the current state before deletion
                localStorage.setItem('activeLoanType', currentLoanType);
                return true;
            }
            return false;
        }
    </script>
}